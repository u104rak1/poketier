// Code generated by MockGen. DO NOT EDIT.
// Source: ./apps/season/internal/application/usecase/list_seasons_usecase.go
//
// Generated by this command:
//
//	mockgen -source=./apps/season/internal/application/usecase/list_seasons_usecase.go -destination=./apps/season/internal/application/usecase/list_seasons_usecase_mock_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	entity "poketier/apps/season/internal/domain/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLSSeasonRepository is a mock of LSSeasonRepository interface.
type MockLSSeasonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLSSeasonRepositoryMockRecorder
	isgomock struct{}
}

// MockLSSeasonRepositoryMockRecorder is the mock recorder for MockLSSeasonRepository.
type MockLSSeasonRepositoryMockRecorder struct {
	mock *MockLSSeasonRepository
}

// NewMockLSSeasonRepository creates a new mock instance.
func NewMockLSSeasonRepository(ctrl *gomock.Controller) *MockLSSeasonRepository {
	mock := &MockLSSeasonRepository{ctrl: ctrl}
	mock.recorder = &MockLSSeasonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLSSeasonRepository) EXPECT() *MockLSSeasonRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockLSSeasonRepository) FindAll(ctx context.Context) ([]*entity.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*entity.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockLSSeasonRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLSSeasonRepository)(nil).FindAll), ctx)
}
