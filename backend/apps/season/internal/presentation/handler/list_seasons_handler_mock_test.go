// Code generated by MockGen. DO NOT EDIT.
// Source: ./apps/season/internal/presentation/handler/list_seasons_handler.go
//
// Generated by this command:
//
//	mockgen -source=./apps/season/internal/presentation/handler/list_seasons_handler.go -destination=./apps/season/internal/presentation/handler/list_seasons_handler_mock_test.go -package=handler_test
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	usecase "poketier/apps/season/internal/application/usecase"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockListSeasonsUseCase is a mock of ListSeasonsUseCase interface.
type MockListSeasonsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockListSeasonsUseCaseMockRecorder
	isgomock struct{}
}

// MockListSeasonsUseCaseMockRecorder is the mock recorder for MockListSeasonsUseCase.
type MockListSeasonsUseCaseMockRecorder struct {
	mock *MockListSeasonsUseCase
}

// NewMockListSeasonsUseCase creates a new mock instance.
func NewMockListSeasonsUseCase(ctrl *gomock.Controller) *MockListSeasonsUseCase {
	mock := &MockListSeasonsUseCase{ctrl: ctrl}
	mock.recorder = &MockListSeasonsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListSeasonsUseCase) EXPECT() *MockListSeasonsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListSeasonsUseCase) Execute(ctx context.Context) (*usecase.ListSeasonsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(*usecase.ListSeasonsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListSeasonsUseCaseMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListSeasonsUseCase)(nil).Execute), ctx)
}
