// Code generated by MockGen. DO NOT EDIT.
// Source: ./apps/tierlist/internal/infrastructure/repository/season_repository.go
//
// Generated by this command:
//
//	mockgen -source=./apps/tierlist/internal/infrastructure/repository/season_repository.go -destination=./apps/tierlist/internal/infrastructure/repository/season_repository_mock_test.go -package=repository_test
//

// Package repository_test is a generated GoMock package.
package repository_test

import (
	context "context"
	db "poketier/sqlc/db"
	reflect "reflect"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockSeasonQuerier is a mock of SeasonQuerier interface.
type MockSeasonQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockSeasonQuerierMockRecorder
	isgomock struct{}
}

// MockSeasonQuerierMockRecorder is the mock recorder for MockSeasonQuerier.
type MockSeasonQuerierMockRecorder struct {
	mock *MockSeasonQuerier
}

// NewMockSeasonQuerier creates a new mock instance.
func NewMockSeasonQuerier(ctrl *gomock.Controller) *MockSeasonQuerier {
	mock := &MockSeasonQuerier{ctrl: ctrl}
	mock.recorder = &MockSeasonQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeasonQuerier) EXPECT() *MockSeasonQuerierMockRecorder {
	return m.recorder
}

// DeleteSeason mocks base method.
func (m *MockSeasonQuerier) DeleteSeason(ctx context.Context, seasonID pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeason", ctx, seasonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeason indicates an expected call of DeleteSeason.
func (mr *MockSeasonQuerierMockRecorder) DeleteSeason(ctx, seasonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeason", reflect.TypeOf((*MockSeasonQuerier)(nil).DeleteSeason), ctx, seasonID)
}

// GetActiveSeason mocks base method.
func (m *MockSeasonQuerier) GetActiveSeason(ctx context.Context) (db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSeason", ctx)
	ret0, _ := ret[0].(db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSeason indicates an expected call of GetActiveSeason.
func (mr *MockSeasonQuerierMockRecorder) GetActiveSeason(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSeason", reflect.TypeOf((*MockSeasonQuerier)(nil).GetActiveSeason), ctx)
}

// GetSeason mocks base method.
func (m *MockSeasonQuerier) GetSeason(ctx context.Context, seasonID pgtype.UUID) (db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeason", ctx, seasonID)
	ret0, _ := ret[0].(db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeason indicates an expected call of GetSeason.
func (mr *MockSeasonQuerierMockRecorder) GetSeason(ctx, seasonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeason", reflect.TypeOf((*MockSeasonQuerier)(nil).GetSeason), ctx, seasonID)
}

// ListSeasons mocks base method.
func (m *MockSeasonQuerier) ListSeasons(ctx context.Context) ([]db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeasons", ctx)
	ret0, _ := ret[0].([]db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeasons indicates an expected call of ListSeasons.
func (mr *MockSeasonQuerierMockRecorder) ListSeasons(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeasons", reflect.TypeOf((*MockSeasonQuerier)(nil).ListSeasons), ctx)
}

// SaveSeason mocks base method.
func (m *MockSeasonQuerier) SaveSeason(ctx context.Context, arg db.SaveSeasonParams) (db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSeason", ctx, arg)
	ret0, _ := ret[0].(db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSeason indicates an expected call of SaveSeason.
func (mr *MockSeasonQuerierMockRecorder) SaveSeason(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSeason", reflect.TypeOf((*MockSeasonQuerier)(nil).SaveSeason), ctx, arg)
}

// UpdateSeason mocks base method.
func (m *MockSeasonQuerier) UpdateSeason(ctx context.Context, arg db.UpdateSeasonParams) (db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeason", ctx, arg)
	ret0, _ := ret[0].(db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeason indicates an expected call of UpdateSeason.
func (mr *MockSeasonQuerierMockRecorder) UpdateSeason(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeason", reflect.TypeOf((*MockSeasonQuerier)(nil).UpdateSeason), ctx, arg)
}
