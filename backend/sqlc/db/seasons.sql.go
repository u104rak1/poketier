// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seasons.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkCreateSeasonsParams struct {
	SeasonID  pgtype.UUID `json:"season_id"`
	Name      string      `json:"name"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	IsActive  pgtype.Bool `json:"is_active"`
}

const BulkDeleteSeasons = `-- name: BulkDeleteSeasons :exec
DELETE FROM seasons
WHERE season_id = ANY($1::uuid[])
`

// 指定したIDリストのシーズンを一括削除
func (q *Queries) BulkDeleteSeasons(ctx context.Context, dollar_1 []pgtype.UUID) error {
	_, err := q.db.Exec(ctx, BulkDeleteSeasons, dollar_1)
	return err
}

const CountSeasons = `-- name: CountSeasons :one
SELECT COUNT(*) FROM seasons
`

func (q *Queries) CountSeasons(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountSeasons)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateSeason = `-- name: CreateSeason :one
INSERT INTO seasons (
    season_id,
    name,
    start_date,
    end_date,
    is_active
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING season_id, name, start_date, end_date, is_active, created_at, updated_at
`

type CreateSeasonParams struct {
	SeasonID  pgtype.UUID `json:"season_id"`
	Name      string      `json:"name"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	IsActive  pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateSeason(ctx context.Context, arg CreateSeasonParams) (Season, error) {
	row := q.db.QueryRow(ctx, CreateSeason,
		arg.SeasonID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.IsActive,
	)
	var i Season
	err := row.Scan(
		&i.SeasonID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteAllSeasons = `-- name: DeleteAllSeasons :exec
DELETE FROM seasons
`

// 開発・テスト用: 全シーズンを削除
func (q *Queries) DeleteAllSeasons(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllSeasons)
	return err
}

const DeleteSeason = `-- name: DeleteSeason :exec
DELETE FROM seasons
WHERE season_id = $1
`

func (q *Queries) DeleteSeason(ctx context.Context, seasonID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteSeason, seasonID)
	return err
}

const GetActiveSeason = `-- name: GetActiveSeason :one
SELECT season_id, name, start_date, end_date, is_active, created_at, updated_at FROM seasons
WHERE is_active = true
LIMIT 1
`

func (q *Queries) GetActiveSeason(ctx context.Context) (Season, error) {
	row := q.db.QueryRow(ctx, GetActiveSeason)
	var i Season
	err := row.Scan(
		&i.SeasonID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSeason = `-- name: GetSeason :one
SELECT season_id, name, start_date, end_date, is_active, created_at, updated_at FROM seasons
WHERE season_id = $1
`

func (q *Queries) GetSeason(ctx context.Context, seasonID pgtype.UUID) (Season, error) {
	row := q.db.QueryRow(ctx, GetSeason, seasonID)
	var i Season
	err := row.Scan(
		&i.SeasonID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListSeasons = `-- name: ListSeasons :many
SELECT season_id, name, start_date, end_date, is_active, created_at, updated_at FROM seasons
ORDER BY start_date DESC
`

func (q *Queries) ListSeasons(ctx context.Context) ([]Season, error) {
	rows, err := q.db.Query(ctx, ListSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Season{}
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.SeasonID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SaveSeason = `-- name: SaveSeason :one

INSERT INTO seasons (
    season_id,
    name,
    start_date,
    end_date,
    is_active
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT (season_id) 
DO UPDATE SET
    name = EXCLUDED.name,
    start_date = EXCLUDED.start_date,
    end_date = EXCLUDED.end_date,
    is_active = EXCLUDED.is_active
RETURNING season_id, name, start_date, end_date, is_active, created_at, updated_at
`

type SaveSeasonParams struct {
	SeasonID  pgtype.UUID `json:"season_id"`
	Name      string      `json:"name"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	IsActive  pgtype.Bool `json:"is_active"`
}

// シーズンのCRUD操作
// Upsert: 存在する場合は更新、しない場合は挿入
func (q *Queries) SaveSeason(ctx context.Context, arg SaveSeasonParams) (Season, error) {
	row := q.db.QueryRow(ctx, SaveSeason,
		arg.SeasonID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.IsActive,
	)
	var i Season
	err := row.Scan(
		&i.SeasonID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SetActiveSeason = `-- name: SetActiveSeason :exec
UPDATE seasons 
SET is_active = CASE 
    WHEN season_id = $1 THEN true 
    ELSE false 
END
`

// 既存のアクティブシーズンを無効化してから新しいシーズンを有効化
func (q *Queries) SetActiveSeason(ctx context.Context, seasonID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, SetActiveSeason, seasonID)
	return err
}

const UpdateSeason = `-- name: UpdateSeason :one
UPDATE seasons
SET 
    name = $2,
    start_date = $3,
    end_date = $4,
    is_active = $5
WHERE season_id = $1
RETURNING season_id, name, start_date, end_date, is_active, created_at, updated_at
`

type UpdateSeasonParams struct {
	SeasonID  pgtype.UUID `json:"season_id"`
	Name      string      `json:"name"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	IsActive  pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateSeason(ctx context.Context, arg UpdateSeasonParams) (Season, error) {
	row := q.db.QueryRow(ctx, UpdateSeason,
		arg.SeasonID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.IsActive,
	)
	var i Season
	err := row.Scan(
		&i.SeasonID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
